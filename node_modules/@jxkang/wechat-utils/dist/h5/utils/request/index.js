import Taro, { request as _request, getStorageSync as _getStorageSync } from "@tarojs/taro-h5";
import message from "../message/index";

// const isWeb = Taro.ENV_TYPE.WEB === Taro.getEnv();

const noop = () => {};
const BaseConfig = {
  baseUrl: '',
  defaultHeaders: {},
  injectResponseCallback: () => {},
  againResCode: '',

  fetchSuccess: noop,
  fetchBefore: noop,
  fetchComplete: noop,
  fetchFail: noop,

  // 允许通过的code值
  allowCodes: ''
};

const request = function ({
  url,
  data = {},
  type = 'GET',
  headers = {},
  special = {},
  before = noop,
  success = noop,
  complete = noop,
  error = noop
}) {

  url = url.indexOf('//') > -1 ? url : BaseConfig.baseUrl + url;

  const method = type.toUpperCase();
  headers = Object.assign({ Accept: 'application/json' }, method === 'POST' || method === 'PUT' || method === 'PATCH' ? { 'Content-Type': 'application/json; charset=UTF-8' } : {}, BaseConfig.defaultHeaders, headers);

  const requestOptions = {
    url,
    method,
    header: headers,
    data,
    success: res => {
      success(res);
      BaseConfig.fetchSuccess(res);
    },
    complete: res => {
      complete(res);
      BaseConfig.fetchComplete(res);
    },
    fail: err => {
      error(err);
      BaseConfig.fetchFail(err);
    }
  };

  BaseConfig.fetchBefore(requestOptions);
  before(requestOptions);
  return _request(requestOptions).then(resData => {
    const resModel = resData.data;
    const responseCode = `${resModel.responseCode}`;
    // 业务事务处理
    if (typeof BaseConfig.injectResponseCallback === 'function') {
      BaseConfig.injectResponseCallback(resModel);
    }

    if (special.customTip !== true && (resModel.status === false || responseCode !== '0') && BaseConfig.allowCodes.indexOf(`,${responseCode},`) === -1) {
      message.warn(resModel.message || '系统繁忙,请稍后再试');
    }

    // 需要重新登录的情况
    // if(BaseConfig.againResCode.indexOf(`,${resModel.responseCode},`)>-1){

    // }

    return special.intactModel === true ? resModel : resModel.entry;
  });
};

/**
 * 
 * @param {Object} options 请求参数
 * @example
 * $ajax({
 *  url: 'xxx.json',
 *  headers: {},
 *  data: {id: 1}
 * })
 */
const $ajax = function (options) {
  return request(options);
};

export default $ajax;

export const $post = function (url, reqModel) {
  return request({
    url,
    type: 'POST',
    data: reqModel
  });
};

export const $get = function (url, reqModel) {
  return request({
    url,
    type: 'GET',
    data: reqModel
  });
};

$ajax.setBaseUrl = function (ajaxBaseUrl) {
  const cacheBaseUrl = _getStorageSync('ajaxBaseUrl');
  ajaxBaseUrl = cacheBaseUrl || ajaxBaseUrl;
  if (ajaxBaseUrl && typeof ajaxBaseUrl === 'string') {
    BaseConfig.baseUrl = ajaxBaseUrl.indexOf('//') === -1 ? `//${ajaxBaseUrl}` : ajaxBaseUrl;
  }
};

$ajax.getBaseUrl = function () {
  return BaseConfig.baseUrl;
};

$ajax.injectHeaders = function (headers = {}) {
  return Object.assign(BaseConfig.defaultHeaders, headers);
};
$ajax.uninjectHeaders = function () {
  BaseConfig.defaultHeaders = {};
};

/**
 * 注入共性事务处理方法 偏业务类型
 */
$ajax.injectResponse = function (callback) {
  if (typeof callback === 'function') {
    BaseConfig.injectResponseCallback = callback;
  }
};

/**
 * 注入异常错误编码
 */
$ajax.injectErrCode = function (codes = []) {
  BaseConfig.againResCode = !Array.isArray(codes) || codes.length === 0 ? '' : `,${codes.toString()},`;
};

/**
 * 注入一些生命周期性函数
 */
$ajax.injectRevolution = function (fns) {
  if (typeof fns === 'object') {
    Object.assign(BaseConfig, fns);
  }
};

/**
 * 注入不需要弹框的异常code值
 */
$ajax.injectAllowCode = function (codes) {
  BaseConfig.allowCodes = `,${[].concat(codes).join(',')},`;
  return BaseConfig.allowCodes;
};