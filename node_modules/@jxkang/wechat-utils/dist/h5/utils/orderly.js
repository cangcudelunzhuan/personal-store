import Common from './common';

export default function Orderly(func, options = {}) {
  const selfThis = this;
  let touchLoading = false;

  return function () {

    const args = Array.from(arguments);
    args.push(function () {
      touchLoading = false;
    });

    if (!touchLoading) {
      touchLoading = true;
      const ret = func.apply(selfThis, args);

      Common.seek().equal(ret && typeof ret.then === 'function', () => ret.then(function () {
        touchLoading = false;
      })).equal(ret && typeof ret.finally === 'function', () => ret.finally(function () {
        touchLoading = false;
      })).equal(ret && typeof ret.catch === 'function', () => ret.catch(function () {
        touchLoading = false;
      })).else(() => options.orderlyTimer === null ? null : setTimeout(function () {
        touchLoading = false;
      }, options.orderlyTimer || 2000)).get()();
    }
  }.bind(selfThis);
}