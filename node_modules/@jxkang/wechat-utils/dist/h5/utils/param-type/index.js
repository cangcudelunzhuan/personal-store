/**
 * @Author: 谭生虎 TanShenghu tanshenghu@163.com
 * @Update: 2020-03-20
 * @Description: 参数数据类型验证 主要运用于移动端与NodeJs项目中   后期优化点: 递归深入到每一个节点进行相应的数据类型验证
 */
import Common from '../common';

// 全局自定义规则
const ruleUtils = {};
// 临时自定规则 用完即毁   临时规则优先于全局规则
let temporaryRuleUtils = {};

function paramType(parameter, rules, Tip) {
  function getRuleKeys(rule) {
    return Object.keys(rule);
  }

  const verifTools = {
    value: null,
    // 必填项
    required(value) {
      this.value = value;
      return !!value && value !== 0;
    },
    // 非Null或undefined
    notNull(value) {
      this.value = value;
      return value !== null && typeof value !== 'undefined';
    },
    // 自定义项
    custom(value, callback) {
      return callback(value, Common.extend({}, ruleUtils, temporaryRuleUtils));
    },
    // 字符长度
    length(value, { min = 0, max }) {
      return typeof value === 'string' && value.length >= min && (!max || value.length <= max);
    },
    // 值在某个集合范围内
    among(value, sets) {
      this.value = value;
      return sets.includes(value);
    },
    // 字符类型
    string(value) {
      this.value = value;
      return value.constructor === String;
    },
    // 数字类型
    number(value) {
      this.value = value;
      return value.constructor === Number;
    },
    // 对象类型
    object(value) {
      this.value = value;
      return value.constructor === Object;
    },
    // 函数类型
    function(value) {
      this.value = value;
      return value.constructor === Function;
    },
    // 数组类型
    array(value) {
      this.value = value;
      return value.constructor === Array;
    },
    // 日期类型
    date(value) {
      this.value = value;
      return value.constructor === Date;
    },
    // 布尔类型
    boolean(value) {
      this.value = value;
      return value.constructor === Boolean;
    }
  };

  const currentLoopRule = {};

  const fields = getRuleKeys(rules);
  const checkResult = fields.every(item => {
    const currentFieldsRules = [].concat(Object.keys(rules[item].rule));
    const result = currentFieldsRules.every(rItem => {
      // 首字母小写
      rItem = `${rItem}`.replace(/./, a => {
        return a.toLowerCase();
      });

      if (verifTools[rItem]) {
        currentLoopRule.name = rItem;
        currentLoopRule.message = rules[item].message[rItem] || `${item},${rItem} 验证失败`;

        let applys;
        if (rItem === 'custom' || rItem === 'length' || rItem === 'among') {
          applys = rules[item].rule[rItem];
        }
        return verifTools[rItem](parameter[item], applys);
      }
      return true;
    });
    return result;
  });

  if (typeof Tip === 'function' && !checkResult) {
    Tip(currentLoopRule.message, currentLoopRule);
  }

  // 临时验证规则 生命周期结束
  temporaryRuleUtils = {};
  return checkResult;
}

/**
 * 辅助工具方法
 */
paramType.chain = function () {
  // 最终返回的规则对象
  const result = {};
  // 当前操作的节点对象
  let node = result;
  // 当前操作节点对象链路
  let nodeSelector = 'result';
  const toLower = v => `${v}`.toLowerCase();

  return {
    add(fieldName) {
      result[fieldName] = result[fieldName] || {};
      node = result[fieldName];
      nodeSelector += `.${fieldName}`;
      return this;
    },
    rule(ruleName, rule, message) {
      // 数据类型 简写规则支持
      if (!Common.isType(rule, 'function')) {
        const itemRule = Common.seek().equal(toLower(ruleName) === 'string', String).equal(toLower(ruleName) === 'number', Number).equal(toLower(ruleName) === 'object', Object).equal(toLower(ruleName) === 'function', Function).equal(toLower(ruleName) === 'array', Array).equal(toLower(ruleName) === 'date', Date).equal(toLower(ruleName) === 'boolean', Boolean).get();
        if (itemRule) {
          message = rule;
          rule = itemRule;
        }
      }

      node.rule = node.rule || {};
      node.message = node.message || {};
      node.rule[ruleName] = rule;
      if (message) {
        node.message[ruleName] = message;
      }
      return this;
    },
    end() {
      node = result;
      nodeSelector = nodeSelector.replace(/.[\w\-]+$/, '');
      return this;
    },
    /**
     * 添加一些临时规则
     */
    injectRules(iRuleUtils) {
      if (Common.isType(iRuleUtils, 'object')) {
        temporaryRuleUtils = iRuleUtils;
      }
      return this;
    },
    toConfig() {
      return result;
    }
  };
};

/**
 * 注入一些全局常用的验证规则
 */
paramType.injectRules = function (rules) {
  if (Common.isType(rules, 'object')) {
    Common.extend(ruleUtils, rules);
  }
};

export default paramType;