'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var Taro = require('@tarojs/taro-h5');
var Taro__default = _interopDefault(Taro);
var mobxCommon = require('@tarojs/mobx-common');
var nervjs = require('nervjs');
var mobx = require('mobx');

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function () {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var Provider = /*#__PURE__*/function (_Taro$Component) {
  _inherits(Provider, _Taro$Component);

  var _super = _createSuper(Provider);

  function Provider(props) {
    var _this;

    _classCallCheck(this, Provider);

    _this = _super.call(this, props);
    mobxCommon.setStore(props.store);
    return _this;
  }

  _createClass(Provider, [{
    key: "render",
    value: function render() {
      return nervjs.Children.only(this.props.children);
    }
  }]);

  return Provider;
}(Taro__default.Component);

function createStoreInjector(grabStoresFn, injectNames, sourceComponent) {
  var Injector = /*#__PURE__*/function (_Component) {
    _inherits(Injector, _Component);

    var _super = _createSuper(Injector);

    function Injector() {
      var _this;

      _classCallCheck(this, Injector);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = _super.call.apply(_super, [this].concat(args));

      _defineProperty(_assertThisInitialized(_this), "__observeInstance", void 0);

      return _this;
    }

    _createClass(Injector, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var originProps = mobxCommon.mapStoreToProps(grabStoresFn, this.props);
        return nervjs.createElement(sourceComponent, _objectSpread2(_objectSpread2({}, originProps), {}, {
          ref: function ref(_ref) {
            originProps.ref && originProps.ref(_ref);

            if (_ref) {
              _this2.__observeInstance = _ref;
            }
          }
        }));
      }
    }, {
      key: "componentDidShow",
      value: function componentDidShow() {
        var componentDidShow = sourceComponent.prototype.componentDidShow;

        if (typeof componentDidShow === 'function') {
          componentDidShow.call(this.__observeInstance);
        }
      }
    }, {
      key: "componentDidHide",
      value: function componentDidHide() {
        var componentDidHide = sourceComponent.prototype.componentDidHide;

        if (typeof componentDidHide === 'function') {
          componentDidHide.call(this.__observeInstance);
        }
      }
    }, {
      key: "beforeRouteLeave",
      value: function beforeRouteLeave(from, to, next) {
        var beforeRouteLeave = sourceComponent.prototype.beforeRouteLeave;

        if (typeof beforeRouteLeave === 'function') {
          beforeRouteLeave.call.apply(beforeRouteLeave, [this.__observeInstance].concat(Array.prototype.slice.call(arguments)));
        } else {
          next(true);
        }
      }
    }]);

    return Injector;
  }(Taro.Component);

  _defineProperty(Injector, "isMobxInjector", true);

  _defineProperty(Injector, "config", sourceComponent.config || {});

  _defineProperty(Injector, "displayName", mobxCommon.getInjectName(sourceComponent, injectNames));

  return Injector;
}

function inject() {
  return mobxCommon.inject.apply(void 0, Array.prototype.slice.call(arguments).concat([createStoreInjector]));
}

function observer(component) {
  if (mobxCommon.isUsingStaticRendering()) {
    return component;
  }

  if (component.isMobxInjector === true) {
    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
  }

  var target = component.prototype;
  var originComponentWillUnmount = target.componentWillUnmount;

  target.componentWillUnmount = function () {
    if (this._reaction) {
      this._reaction.dispose();
    }

    originComponentWillUnmount && originComponentWillUnmount.call(this);
  };

  var originRender = target.render;

  target.render = function () {
    var _this = this;

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    if (!this._reaction) {
      var initialName = this.displayName || this.name;
      this._reaction = new mobx.Reaction("".concat(initialName, "_").concat(Date.now()), function () {
        _this.componentWillReact && _this.componentWillReact();

        _this.forceUpdate();
      });
    }

    var result;
    var exception;

    this._reaction.track(function () {
      try {
        result = originRender.call(_this, null, null, args[2]);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      mobxCommon.errorsReporter.emit(exception);
      throw exception;
    }

    return result;
  };

  return component;
}

function useLocalStore(initializer, current) {
  return mobxCommon.useLocalStore(initializer, current, Taro.useState);
}

function useAsObservableSource(current) {
  return mobxCommon.useAsObservableSource(current, Taro.useState);
}

var index = {
  PropTypes: mobxCommon.PropTypes,
  onError: mobxCommon.onError,
  observer: observer,
  inject: inject,
  Provider: Provider,
  useLocalStore: useLocalStore,
  useAsObservableSource: useAsObservableSource,
  isUsingStaticRendering: mobxCommon.isUsingStaticRendering,
  useStaticRendering: mobxCommon.useStaticRendering
};

exports.PropTypes = mobxCommon.PropTypes;
exports.onError = mobxCommon.onError;
exports.isUsingStaticRendering = mobxCommon.isUsingStaticRendering;
exports.useStaticRendering = mobxCommon.useStaticRendering;
exports.default = index;
exports.observer = observer;
exports.inject = inject;
exports.Provider = Provider;
exports.useLocalStore = useLocalStore;
exports.useAsObservableSource = useAsObservableSource;
